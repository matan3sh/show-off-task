{"version":3,"sources":["store/reducer.js","store/index.js","services/movieService.js","store/actions.js","components/layout/Loader.jsx","components/layout/Rate.jsx","components/movie/MovieDetail.jsx","components/movie/MoviePreview.jsx","components/movie/MovieList.jsx","components/movie/MovieFilter.jsx","components/pages/MovieApp.jsx","components/layout/Navbar.jsx","App.js","serviceWorker.js","index.js"],"names":["initialState","movies","rootReducer","combineReducers","movieApp","state","action","type","payload","store","createStore","composeWithDevTools","applyMiddleware","thunk","query","filter","a","axios","get","res","data","movie","title","toLowerCase","includes","console","log","loadMovies","dispatch","movieService","then","err","loaderStyle","margin","width","display","justifyContent","alignItems","Loader","src","alt","style","Rate","rate","className","Modal","setAppElement","MovieDetail","openModal","onClose","isOpen","onRequestClose","overlayClassName","image","releaseYear","genre","join","rating","MoviePreview","setState","onOpenModal","this","props","onClick","color","size","React","Component","MovieList","map","index","key","MovieFilter","txt","onChange","target","field","name","value","placeholder","mapDispatchToProps","connect","MovieApp","setTimeout","length","Navbar","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.c9bd1f0b.chunk.js","sourcesContent":["const initialState = {\n  movies: []\n};\n\nexport default function reducer(state = initialState, action) {\n  switch (action.type) {\n    case 'SET_MOVIES':\n      return {\n        ...state,\n        movies: action.payload\n      };\n    default:\n      return state;\n  }\n}\n","import { createStore, combineReducers, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\n\nimport reducer from './reducer';\n\nconst rootReducer = combineReducers({\n  movieApp: reducer\n});\n\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools(applyMiddleware(thunk))\n);\n\nexport default store;\n","import axios from 'axios';\nconst BASE_URL = '/movies.json';\n\nconst query = async (filter) => {\n  try {\n    const res = await axios.get(BASE_URL);\n    const data = await res.data;\n    const movies = await data.filter((movie) =>\n      movie.title.toLowerCase().includes(filter.toLowerCase())\n    );\n    return movies;\n  } catch (err) {\n    console.log(err);\n  }\n};\n\nexport default {\n  query\n};\n","import movieService from '../services/movieService';\n\nexport function loadMovies(filter) {\n  if (!filter) filter = '';\n  return (dispatch) => {\n    try {\n      movieService\n        .query(filter)\n        .then((movies) => dispatch({ type: 'SET_MOVIES', payload: movies }));\n    } catch (err) {\n      console.log(err);\n    }\n  };\n}\n","import React from 'react';\n\nconst Loader = () => (\n  <img\n    src='https://thumbs.gfycat.com/SpryNegligibleLeafcutterant-size_restricted.gif'\n    alt='Loading...'\n    style={loaderStyle}\n  />\n);\n\nconst loaderStyle = {\n  margin: 'auto',\n  width: '20%',\n  display: 'flex',\n  justifyContent: 'center',\n  alignItems: 'center'\n};\n\nexport default Loader;\n","import React from 'react';\n\nconst Rate = ({ rate }) => {\n  return (\n    <div className='stars-outer'>\n      <div className='stars-inner' style={{ width: `${rate}%` }}></div>\n    </div>\n  );\n};\n\nexport default Rate;\n","import React from 'react';\nimport Modal from 'react-modal';\n\nimport Rate from '../layout/Rate';\n\nimport 'slick-carousel/slick/slick.css';\nimport 'slick-carousel/slick/slick-theme.css';\n\nModal.setAppElement('#root');\n\nconst MovieDetail = ({ openModal, onClose, movie }) => {\n  return (\n    <Modal\n      isOpen={openModal}\n      onRequestClose={() => onClose()}\n      className={'modal'}\n      overlayClassName={'overlay'}\n    >\n      <div className='movie-detail-wrapper'>\n        <img src={movie.image} alt='' />\n        <h1>{movie.title}</h1>\n        <span className='tag tag-teal'>{movie.releaseYear}</span>\n        <h3>{movie.genre.join(', ')}</h3>\n        <div className='flex'>\n          <Rate rate={(movie.rating * 100) / 10} />{' '}\n          <span className='movie-rating'>{movie.rating}</span>\n        </div>\n      </div>\n    </Modal>\n  );\n};\n\nexport default MovieDetail;\n","import React from 'react';\nimport { FaStar } from 'react-icons/fa';\nimport MovieDetail from './MovieDetail';\n\nclass MoviePreview extends React.Component {\n  state = { openModal: false };\n\n  onClose = () => {\n    this.setState({ openModal: false });\n  };\n\n  onOpenModal = () => {\n    this.setState({ openModal: true });\n  };\n\n  render() {\n    const { movie } = this.props;\n    const { openModal } = this.state;\n    return (\n      <>\n        <MovieDetail\n          openModal={openModal}\n          onClose={this.onClose}\n          movie={movie}\n        />\n        <div className='card' onClick={this.onOpenModal}>\n          <div className='card-header'>\n            <img src={movie.image} alt='' />\n          </div>\n          <div className='card-body'>\n            <div className='card-header'>\n              <span className='tag tag-teal'>{movie.releaseYear}</span>\n              <FaStar className='star' color={'#ffc107'} size={25} />\n              <span className='movie-rating'>{movie.rating}</span>\n            </div>\n            <h4>{movie.title}</h4>\n            <p>{movie.genre.join(', ')}</p>\n          </div>\n        </div>\n      </>\n    );\n  }\n}\n\nexport default MoviePreview;\n","import React from 'react';\nimport MoviePreview from './MoviePreview';\n\nconst MovieList = ({ movies }) => {\n  return (\n    <div className='card-container'>\n      {movies.map((movie, index) => (\n        <MoviePreview movie={movie} key={index} />\n      ))}\n    </div>\n  );\n};\n\nexport default MovieList;\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { loadMovies } from '../../store/actions';\n\nclass MovieFilter extends Component {\n  state = { txt: '' };\n\n  onChange = ({ target }) => {\n    const field = target.name;\n    const value = target.value;\n    this.setState(\n      ({ txt }) => ({ ...txt, [field]: value }),\n      () => {\n        this.props.loadMovies(this.state.txt);\n      }\n    );\n  };\n\n  render() {\n    return (\n      <div className='filter'>\n        <input\n          type='text'\n          name='txt'\n          placeholder='Search Movie...'\n          onChange={this.onChange}\n        />\n        <i className='fas fa-search fa-2x' style={{ color: '#92d4e4' }}></i>\n      </div>\n    );\n  }\n}\n\nconst mapDispatchToProps = {\n  loadMovies\n};\n\nexport default connect(null, mapDispatchToProps)(MovieFilter);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { loadMovies } from '../../store/actions';\n\nimport Loader from '../layout/Loader';\nimport MovieList from '../movie/MovieList';\nimport MovieFilter from '../movie/MovieFilter';\n\nclass MovieApp extends React.Component {\n  async componentDidMount() {\n    // await this.props.loadMovies();\n    setTimeout(() => this.props.loadMovies(), 2000);\n  }\n\n  render() {\n    const { movies } = this.props;\n    return (\n      <>\n        {!movies.length ? (\n          <Loader />\n        ) : (\n          <>\n            <MovieFilter />\n            <MovieList movies={movies} />\n          </>\n        )}\n      </>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  movies: state.movieApp.movies\n});\n\nconst mapDispatchToProps = {\n  loadMovies\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MovieApp);\n","import React from 'react';\n\nconst Navbar = () => {\n  return (\n    <nav className='navbar'>\n      <h1>\n        <i className='fas fa-film' /> Show - Off{' '}\n      </h1>\n    </nav>\n  );\n};\n\nexport default Navbar;\n","import React from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport store from './store';\n\nimport MovieApp from './components/pages/MovieApp';\nimport Navbar from './components/layout/Navbar';\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <Router>\n        <div className='container'>\n          <Navbar />\n          <Switch>\n            <Route exact path='/' component={MovieApp} />\n          </Switch>\n        </div>\n      </Router>\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport './style/style.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}